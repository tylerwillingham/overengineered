# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rails_semantic_logger` gem.
# Please instead update this file by running `bin/tapioca gem rails_semantic_logger`.


# source://rails_semantic_logger//lib/rails_semantic_logger/extensions/active_support/logger.rb#3
module ActiveSupport
  # source://activesupport/7.2.1/lib/active_support/json/decoding.rb#9
  def parse_json_times; end

  # source://activesupport/7.2.1/lib/active_support/json/decoding.rb#9
  def parse_json_times=(val); end

  # source://activesupport/7.2.1/lib/active_support.rb#99
  def test_order; end

  # source://activesupport/7.2.1/lib/active_support.rb#99
  def test_order=(val); end

  # source://activesupport/7.2.1/lib/active_support.rb#100
  def test_parallelization_threshold; end

  # source://activesupport/7.2.1/lib/active_support.rb#100
  def test_parallelization_threshold=(val); end

  class << self
    # source://activesupport/7.2.1/lib/active_support.rb#105
    def cache_format_version; end

    # source://activesupport/7.2.1/lib/active_support.rb#109
    def cache_format_version=(value); end

    # source://activesupport/7.2.1/lib/active_support/deprecator.rb#4
    def deprecator; end

    # source://activesupport/7.2.1/lib/active_support.rb#93
    def eager_load!; end

    # source://activesupport/7.2.1/lib/active_support.rb#103
    def error_reporter; end

    # source://activesupport/7.2.1/lib/active_support.rb#103
    def error_reporter=(_arg0); end

    # source://activesupport/7.2.1/lib/active_support/json/encoding.rb#8
    def escape_html_entities_in_json(*_arg0, **_arg1, &_arg2); end

    # source://activesupport/7.2.1/lib/active_support/json/encoding.rb#8
    def escape_html_entities_in_json=(arg); end

    # source://activesupport/7.2.1/lib/active_support/gem_version.rb#5
    def gem_version; end

    # source://activesupport/7.2.1/lib/active_support/json/encoding.rb#8
    def json_encoder(*_arg0, **_arg1, &_arg2); end

    # source://activesupport/7.2.1/lib/active_support/json/encoding.rb#8
    def json_encoder=(arg); end

    # source://activesupport/7.2.1/lib/active_support/json/decoding.rb#9
    def parse_json_times; end

    # source://activesupport/7.2.1/lib/active_support/json/decoding.rb#9
    def parse_json_times=(val); end

    # source://activesupport/7.2.1/lib/active_support.rb#99
    def test_order; end

    # source://activesupport/7.2.1/lib/active_support.rb#99
    def test_order=(val); end

    # source://activesupport/7.2.1/lib/active_support.rb#100
    def test_parallelization_threshold; end

    # source://activesupport/7.2.1/lib/active_support.rb#100
    def test_parallelization_threshold=(val); end

    # source://activesupport/7.2.1/lib/active_support/json/encoding.rb#8
    def time_precision(*_arg0, **_arg1, &_arg2); end

    # source://activesupport/7.2.1/lib/active_support/json/encoding.rb#8
    def time_precision=(arg); end

    # source://activesupport/7.2.1/lib/active_support.rb#113
    def to_time_preserves_timezone; end

    # source://activesupport/7.2.1/lib/active_support.rb#117
    def to_time_preserves_timezone=(value); end

    # source://activesupport/7.2.1/lib/active_support/json/encoding.rb#8
    def use_standard_json_time_format(*_arg0, **_arg1, &_arg2); end

    # source://activesupport/7.2.1/lib/active_support/json/encoding.rb#8
    def use_standard_json_time_format=(arg); end

    # source://activesupport/7.2.1/lib/active_support.rb#127
    def utc_to_local_returns_utc_offset_times; end

    # source://activesupport/7.2.1/lib/active_support.rb#131
    def utc_to_local_returns_utc_offset_times=(value); end

    # source://activesupport/7.2.1/lib/active_support/version.rb#7
    def version; end
  end
end

# More hacks to try and stop Rails from being it's own worst enemy.
#
# source://rails_semantic_logger//lib/rails_semantic_logger/extensions/active_support/logger.rb#5
class ActiveSupport::Logger < ::Logger
  # source://activesupport/7.2.1/lib/active_support/logger.rb#33
  def initialize(*args, **kwargs); end

  # source://activesupport/7.2.1/lib/active_support/logger_silence.rb#12
  def silencer; end

  # source://activesupport/7.2.1/lib/active_support/logger_silence.rb#12
  def silencer=(val); end

  class << self
    # Prevent Console from trying to merge loggers
    #
    # @return [Boolean]
    #
    # source://rails_semantic_logger//lib/rails_semantic_logger/extensions/active_support/logger.rb#19
    def logger_outputs_to?(*_args); end

    # source://rails_semantic_logger//lib/rails_semantic_logger/extensions/active_support/logger.rb#23
    def new(*_args, **_kwargs); end

    # source://activesupport/7.2.1/lib/active_support/logger.rb#47
    def normalize_sources(sources); end

    # source://activesupport/7.2.1/lib/active_support/logger_silence.rb#12
    def silencer; end

    # source://activesupport/7.2.1/lib/active_support/logger_silence.rb#12
    def silencer=(val); end
  end
end

class Rackup::Server
  include ::RailsSemanticLogger::Rackup::Server
end

# source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#1
module RailsSemanticLogger
  class << self
    # Swap an existing subscriber with a new one
    #
    # source://rails_semantic_logger//lib/rails_semantic_logger.rb#43
    def swap_subscriber(old_class, new_class, notifier); end

    private

    # source://rails_semantic_logger//lib/rails_semantic_logger.rb#62
    def subscriber_patterns(subscriber); end

    # source://rails_semantic_logger//lib/rails_semantic_logger.rb#50
    def unattach(subscriber); end
  end
end

# source://rails_semantic_logger//lib/rails_semantic_logger.rb#6
module RailsSemanticLogger::ActionController; end

# source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#3
class RailsSemanticLogger::ActionController::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#97
  def exist_fragment?(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#97
  def expire_fragment(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#97
  def expire_page(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#69
  def halted_callback(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#11
  def process_action(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#97
  def read_fragment(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#77
  def redirect_to(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#81
  def send_data(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#73
  def send_file(event); end

  # Log as debug to hide Processing messages in production
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#7
  def start_processing(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#87
  def unpermitted_parameters(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#97
  def write_fragment(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#97
  def write_page(event); end

  private

  # Returns the logger for the supplied event.
  # Returns ActionController::Base.logger if no controller is present
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#112
  def controller_logger(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#121
  def extract_path(path); end
end

# source://rails_semantic_logger//lib/rails_semantic_logger/action_controller/log_subscriber.rb#4
RailsSemanticLogger::ActionController::LogSubscriber::INTERNAL_PARAMS = T.let(T.unsafe(nil), Array)

# source://rails_semantic_logger//lib/rails_semantic_logger.rb#10
module RailsSemanticLogger::ActionMailer; end

# source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#6
class RailsSemanticLogger::ActionMailer::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#7
  def deliver(event); end

  # An email was generated.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#33
  def process(event); end

  private

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#122
  def log_with_formatter(level: T.unsafe(nil), **kw_args); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#128
  def logger; end
end

# source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#44
class RailsSemanticLogger::ActionMailer::LogSubscriber::EventFormatter
  # @return [EventFormatter] a new instance of EventFormatter
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#45
  def initialize(event:, log_duration: T.unsafe(nil)); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#72
  def date; end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#54
  def payload; end

  private

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#88
  def action; end

  # Returns the value of attribute event.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#82
  def event; end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#100
  def format(arg); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#92
  def formatted_args; end

  # @return [Boolean]
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#117
  def log_duration?; end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_mailer/log_subscriber.rb#84
  def mailer; end
end

# source://rails_semantic_logger//lib/rails_semantic_logger.rb#14
module RailsSemanticLogger::ActionView; end

# Output Semantic logs from Action View.
#
# source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#6
class RailsSemanticLogger::ActionView::LogSubscriber < ::ActiveSupport::LogSubscriber
  # @return [LogSubscriber] a new instance of LogSubscriber
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#14
  def initialize; end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#54
  def render_collection(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#36
  def render_partial(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#19
  def render_template(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#74
  def start(name, id, payload); end

  private

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#141
  def from_rails_root(string); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#151
  def logger; end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#147
  def rails_root; end

  # @return [Boolean]
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#137
  def should_log?; end

  class << self
    # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#118
    def attach_to(*_arg0); end

    # Returns the value of attribute logger.
    #
    # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#10
    def logger; end

    # Returns the value of attribute rendered_log_level.
    #
    # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#11
    def rendered_log_level; end

    # Sets the attribute rendered_log_level
    #
    # @param value the value to set the attribute rendered_log_level to.
    #
    # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#11
    def rendered_log_level=(_arg0); end
  end
end

# source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#135
RailsSemanticLogger::ActionView::LogSubscriber::EMPTY = T.let(T.unsafe(nil), String)

# source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#87
class RailsSemanticLogger::ActionView::LogSubscriber::Start
  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#98
  def finish(name, id, payload); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#88
  def start(name, _id, payload); end

  private

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#103
  def from_rails_root(string); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#113
  def logger; end

  # source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#109
  def rails_root; end
end

# source://rails_semantic_logger//lib/rails_semantic_logger/action_view/log_subscriber.rb#7
RailsSemanticLogger::ActionView::LogSubscriber::VIEWS_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://rails_semantic_logger//lib/rails_semantic_logger.rb#18
module RailsSemanticLogger::ActiveJob; end

# source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#5
class RailsSemanticLogger::ActiveJob::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#6
  def enqueue(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#27
  def enqueue_at(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#54
  def perform(event); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#48
  def perform_start(event); end

  private

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#145
  def log_with_formatter(level: T.unsafe(nil), **kw_args); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#151
  def logger; end
end

# source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#72
class RailsSemanticLogger::ActiveJob::LogSubscriber::EventFormatter
  # @return [EventFormatter] a new instance of EventFormatter
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#73
  def initialize(event:, log_duration: T.unsafe(nil)); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#78
  def job_info; end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#82
  def payload; end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#95
  def queue_name; end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#99
  def scheduled_at; end

  private

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#111
  def adapter_name; end

  # Returns the value of attribute event.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#105
  def event; end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#123
  def format(arg); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#115
  def formatted_args; end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#107
  def job; end

  # @return [Boolean]
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/active_job/log_subscriber.rb#140
  def log_duration?; end
end

# source://rails_semantic_logger//lib/rails_semantic_logger.rb#22
module RailsSemanticLogger::ActiveRecord; end

# source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#3
class RailsSemanticLogger::ActiveRecord::LogSubscriber < ::ActiveSupport::LogSubscriber
  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#24
  def sql(event); end

  private

  # When multiple values are received for a single bound field, it is converted into an array
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#56
  def add_bind_value(binds, key, value); end

  # Rails 3,4,5 hell trying to get the bind values
  # 3.x
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#120
  def bind_values(payload); end

  # Rails 3,4,5 hell trying to get the bind values
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#70
  def bind_values_v3(payload); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#82
  def bind_values_v4(payload); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#91
  def bind_values_v5_0_0(payload); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#100
  def bind_values_v5_0_3(payload); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#110
  def bind_values_v5_1_5(payload); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#120
  def bind_values_v6_1(payload); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#62
  def logger; end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#169
  def render_bind(attr, value); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#130
  def render_bind_v4_2(column, value); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#144
  def render_bind_v5_0_0(attribute); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#159
  def render_bind_v5_0_3(attr, value); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#169
  def render_bind_v6_1(attr, value); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#186
  def type_casted_binds(casted_binds); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#182
  def type_casted_binds_v5_0_3(binds, casted_binds); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#186
  def type_casted_binds_v5_1_5(casted_binds); end

  class << self
    # Returns the value of attribute logger.
    #
    # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#7
    def logger; end

    # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#18
    def reset_runtime; end

    # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#14
    def runtime; end

    # source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#10
    def runtime=(value); end
  end
end

# source://rails_semantic_logger//lib/rails_semantic_logger/active_record/log_subscriber.rb#4
RailsSemanticLogger::ActiveRecord::LogSubscriber::IGNORE_PAYLOAD_NAMES = T.let(T.unsafe(nil), Array)

# source://rails_semantic_logger//lib/rails_semantic_logger.rb#30
module RailsSemanticLogger::DelayedJob; end

# source://rails_semantic_logger//lib/rails_semantic_logger/engine.rb#5
class RailsSemanticLogger::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.2.1/lib/active_support/callbacks.rb#70
    def __callbacks; end
  end
end

# Options for controlling Rails Semantic Logger behavior
#
# * Convert Action Controller and Active Record text messages to semantic data
#
#     Rails -- Started -- { :ip => "127.0.0.1", :method => "GET", :path => "/dashboards/inquiry_recent_activity" }
#     UserController -- Completed #index -- { :action => "index", :db_runtime => 54.64, :format => "HTML", :method => "GET", :mongo_runtime => 0.0, :path => "/users", :status => 200, :status_message => "OK", :view_runtime => 709.88 }
#
#     config.rails_semantic_logger.semantic = true
#
# * Change Rack started message to debug so that it does not appear in production
#
#     config.rails_semantic_logger.started = false
#
# * Change Processing message to debug so that it does not appear in production
#
#     config.rails_semantic_logger.processing = false
#
# * Change Action View render log messages to debug so that they do not appear in production
#
#     ActionView::Base --   Rendered data/search/_user.html.haml (46.7ms)
#
#     config.rails_semantic_logger.rendered = false
#
# * Override the Awesome Print options for logging Hash data as text:
#
#     Any valid AwesomePrint option for rendering data.
#     The defaults can changed be creating a `~/.aprc` file.
#     See: https://github.com/michaeldv/awesome_print
#
#     Note: The option :multiline is set to false if not supplied.
#     Note: Has no effect if Awesome Print is not installed.
#
#        config.rails_semantic_logger.ap_options = {multiline: false}
#
# * Whether to automatically add an environment specific log file appender.
#     For Example: 'log/development.log'
#
#     Note:
#       When Semantic Logger fails to log to an appender it logs the error to an
#       internal logger, which by default writes to STDERR.
#       Example, change the default internal logger to log to stdout:
#         SemanticLogger::Processor.logger = SemanticLogger::Appender::IO.new($stdout, level: :warn)
#
#       config.rails_semantic_logger.add_file_appender = true
#
# * Silence asset logging
#
#     config.rails_semantic_logger.quiet_assets = false
#
# * Disable automatic logging to stderr when running a Rails console.
#
#     config.rails_semantic_logger.console_logger = false
#
# * Override the output format for the primary Rails log file.
#
#     Valid options:
#     * :default
#         Plain text output with no color.
#     * :color
#         Plain text output with color.
#     * :json
#         JSON output format.
#     * class
#
#     * Proc
#         A block that will be called to format the output.
#         It is supplied with the `log` entry and should return the formatted data.
#
#     Note:
#     * `:default` is automatically changed to `:color` if `config.colorize_logging` is `true`.
#
#     JSON Example, in `application.rb`:
#        config.rails_semantic_logger.format = :json
#
#     Custom Example, create `app/lib/my_formatter.rb`:
#
#       # My Custom colorized formatter
#       class MyFormatter < SemanticLogger::Formatters::Color
#         # Return the complete log level name in uppercase
#         def level
#           "#{color}log.level.upcase#{color_map.clear}"
#         end
#       end
#
#      # In application.rb:
#      config.rails_semantic_logger.format = MyFormatter.new
#
#
#      config.rails_semantic_logger.format = :default
#
# * Add a filter to the file logger [Regexp|Proc]
#   RegExp: Only include log messages where the class name matches the supplied
#           regular expression. All other messages will be ignored.
#   Proc: Only include log messages where the supplied Proc returns true.
#         The Proc must return true or false.
#
#     config.rails_semantic_logger.filter = nil
#
# * named_tags: *DEPRECATED*
#   Instead, supply a Hash to config.log_tags
#   config.rails_semantic_logger.named_tags = nil
#
# source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#103
class RailsSemanticLogger::Options
  # Setup default values
  #
  # @return [Options] a new instance of Options
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#108
  def initialize; end

  # Returns the value of attribute add_file_appender.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def add_file_appender; end

  # Sets the attribute add_file_appender
  #
  # @param value the value to set the attribute add_file_appender to.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def add_file_appender=(_arg0); end

  # Returns the value of attribute ap_options.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def ap_options; end

  # Sets the attribute ap_options
  #
  # @param value the value to set the attribute ap_options to.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def ap_options=(_arg0); end

  # Returns the value of attribute console_logger.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def console_logger; end

  # Sets the attribute console_logger
  #
  # @param value the value to set the attribute console_logger to.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def console_logger=(_arg0); end

  # Returns the value of attribute filter.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def filter; end

  # Sets the attribute filter
  #
  # @param value the value to set the attribute filter to.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def filter=(_arg0); end

  # Returns the value of attribute format.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def format; end

  # Sets the attribute format
  #
  # @param value the value to set the attribute format to.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def format=(_arg0); end

  # Returns the value of attribute named_tags.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def named_tags; end

  # Sets the attribute named_tags
  #
  # @param value the value to set the attribute named_tags to.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def named_tags=(_arg0); end

  # Returns the value of attribute processing.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def processing; end

  # Sets the attribute processing
  #
  # @param value the value to set the attribute processing to.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def processing=(_arg0); end

  # Returns the value of attribute quiet_assets.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def quiet_assets; end

  # Sets the attribute quiet_assets
  #
  # @param value the value to set the attribute quiet_assets to.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def quiet_assets=(_arg0); end

  # Returns the value of attribute rendered.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def rendered; end

  # Sets the attribute rendered
  #
  # @param value the value to set the attribute rendered to.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def rendered=(_arg0); end

  # Returns the value of attribute semantic.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def semantic; end

  # Sets the attribute semantic
  #
  # @param value the value to set the attribute semantic to.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def semantic=(_arg0); end

  # Returns the value of attribute started.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def started; end

  # Sets the attribute started
  #
  # @param value the value to set the attribute started to.
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/options.rb#104
  def started=(_arg0); end
end

# source://rails_semantic_logger//lib/rails_semantic_logger.rb#26
module RailsSemanticLogger::Rack; end

# source://rails_semantic_logger//lib/rails_semantic_logger/rack/logger.rb#9
class RailsSemanticLogger::Rack::Logger < ::ActiveSupport::LogSubscriber
  # @return [Logger] a new instance of Logger
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/rack/logger.rb#15
  def initialize(app, taggers = T.unsafe(nil)); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/rack/logger.rb#20
  def call(env); end

  private

  # source://rails_semantic_logger//lib/rails_semantic_logger/rack/logger.rb#37
  def call_app(request, env); end

  # Leave out any named tags with a nil value
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/rack/logger.rb#78
  def compute_named_tags(request); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/rack/logger.rb#64
  def compute_tags(request); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/rack/logger.rb#95
  def logger; end

  # source://rails_semantic_logger//lib/rails_semantic_logger/rack/logger.rb#53
  def started_request_message(request); end

  class << self
    # Returns the value of attribute logger.
    #
    # source://rails_semantic_logger//lib/rails_semantic_logger/rack/logger.rb#11
    def logger; end

    # Returns the value of attribute started_request_log_level.
    #
    # source://rails_semantic_logger//lib/rails_semantic_logger/rack/logger.rb#12
    def started_request_log_level; end

    # Sets the attribute started_request_log_level
    #
    # @param value the value to set the attribute started_request_log_level to.
    #
    # source://rails_semantic_logger//lib/rails_semantic_logger/rack/logger.rb#12
    def started_request_log_level=(_arg0); end
  end
end

# source://rails_semantic_logger//lib/rails_semantic_logger/extensions/rackup/server.rb#2
module RailsSemanticLogger::Rackup; end

# source://rails_semantic_logger//lib/rails_semantic_logger/extensions/rackup/server.rb#3
module RailsSemanticLogger::Rackup::Server
  # source://rails_semantic_logger//lib/rails_semantic_logger/extensions/rackup/server.rb#4
  def daemonize_app; end
end

# source://rails_semantic_logger//lib/rails_semantic_logger.rb#34
module RailsSemanticLogger::Sidekiq; end

# source://rails_semantic_logger//lib/rails_semantic_logger/sidekiq/job_logger.rb#3
class RailsSemanticLogger::Sidekiq::JobLogger
  # Sidekiq 6.5 does not take any arguments, whereas v7 is given a logger
  #
  # @return [JobLogger] a new instance of JobLogger
  #
  # source://rails_semantic_logger//lib/rails_semantic_logger/sidekiq/job_logger.rb#5
  def initialize(*_args); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/sidekiq/job_logger.rb#8
  def call(item, queue, &block); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/sidekiq/job_logger.rb#31
  def prepare(job_hash, &block); end

  private

  # source://rails_semantic_logger//lib/rails_semantic_logger/sidekiq/job_logger.rb#44
  def job_hash_context(job_hash); end

  # source://rails_semantic_logger//lib/rails_semantic_logger/sidekiq/job_logger.rb#52
  def job_latency_ms(job); end
end

# source://rails_semantic_logger//lib/rails_semantic_logger/sidekiq/loggable.rb#3
module RailsSemanticLogger::Sidekiq::Loggable
  # source://rails_semantic_logger//lib/rails_semantic_logger/sidekiq/loggable.rb#4
  def included(base); end
end
